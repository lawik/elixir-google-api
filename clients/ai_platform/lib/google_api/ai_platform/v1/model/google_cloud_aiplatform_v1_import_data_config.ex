# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.AiPlatform.V1.Model.GoogleCloudAiplatformV1ImportDataConfig do
  @moduledoc """
  Describes the location from where we import data into a Dataset, together with the labels that will be applied to the DataItems and the Annotations.

  ## Attributes

  *   `annotationLabels` (*type:* `map()`, *default:* `nil`) - Labels that will be applied to newly imported Annotations. If two Annotations are identical, one of them will be deduped. Two Annotations are considered identical if their payload, payload_schema_uri and all of their labels are the same. These labels will be overridden by Annotation labels specified inside index file referenced by import_schema_uri, e.g. jsonl file.
  *   `dataItemLabels` (*type:* `map()`, *default:* `nil`) - Labels that will be applied to newly imported DataItems. If an identical DataItem as one being imported already exists in the Dataset, then these labels will be appended to these of the already existing one, and if labels with identical key is imported before, the old label value will be overwritten. If two DataItems are identical in the same import data operation, the labels will be combined and if key collision happens in this case, one of the values will be picked randomly. Two DataItems are considered identical if their content bytes are identical (e.g. image bytes or pdf bytes). These labels will be overridden by Annotation labels specified inside index file referenced by import_schema_uri, e.g. jsonl file.
  *   `gcsSource` (*type:* `GoogleApi.AiPlatform.V1.Model.GoogleCloudAiplatformV1GcsSource.t`, *default:* `nil`) - The Google Cloud Storage location for the input content.
  *   `importSchemaUri` (*type:* `String.t`, *default:* `nil`) - Required. Points to a YAML file stored on Google Cloud Storage describing the import format. Validation will be done against the schema. The schema is defined as an [OpenAPI 3.0.2 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject).
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :annotationLabels => map() | nil,
          :dataItemLabels => map() | nil,
          :gcsSource => GoogleApi.AiPlatform.V1.Model.GoogleCloudAiplatformV1GcsSource.t() | nil,
          :importSchemaUri => String.t() | nil
        }

  field(:annotationLabels, type: :map)
  field(:dataItemLabels, type: :map)
  field(:gcsSource, as: GoogleApi.AiPlatform.V1.Model.GoogleCloudAiplatformV1GcsSource)
  field(:importSchemaUri)
end

defimpl Poison.Decoder, for: GoogleApi.AiPlatform.V1.Model.GoogleCloudAiplatformV1ImportDataConfig do
  def decode(value, options) do
    GoogleApi.AiPlatform.V1.Model.GoogleCloudAiplatformV1ImportDataConfig.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.AiPlatform.V1.Model.GoogleCloudAiplatformV1ImportDataConfig do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
