# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.AiPlatform.V1.Model.GoogleCloudAiplatformV1TrainingPipeline do
  @moduledoc """
  The TrainingPipeline orchestrates tasks associated with training a Model. It always executes the training task, and optionally may also export data from Vertex AI's Dataset which becomes the training input, upload the Model to Vertex AI, and evaluate the Model.

  ## Attributes

  *   `createTime` (*type:* `DateTime.t`, *default:* `nil`) - Output only. Time when the TrainingPipeline was created.
  *   `displayName` (*type:* `String.t`, *default:* `nil`) - Required. The user-defined name of this TrainingPipeline.
  *   `encryptionSpec` (*type:* `GoogleApi.AiPlatform.V1.Model.GoogleCloudAiplatformV1EncryptionSpec.t`, *default:* `nil`) - Customer-managed encryption key spec for a TrainingPipeline. If set, this TrainingPipeline will be secured by this key. Note: Model trained by this TrainingPipeline is also secured by this key if model_to_upload is not set separately.
  *   `endTime` (*type:* `DateTime.t`, *default:* `nil`) - Output only. Time when the TrainingPipeline entered any of the following states: `PIPELINE_STATE_SUCCEEDED`, `PIPELINE_STATE_FAILED`, `PIPELINE_STATE_CANCELLED`.
  *   `error` (*type:* `GoogleApi.AiPlatform.V1.Model.GoogleRpcStatus.t`, *default:* `nil`) - Output only. Only populated when the pipeline's state is `PIPELINE_STATE_FAILED` or `PIPELINE_STATE_CANCELLED`.
  *   `inputDataConfig` (*type:* `GoogleApi.AiPlatform.V1.Model.GoogleCloudAiplatformV1InputDataConfig.t`, *default:* `nil`) - Specifies Vertex AI owned input data that may be used for training the Model. The TrainingPipeline's training_task_definition should make clear whether this config is used and if there are any special requirements on how it should be filled. If nothing about this config is mentioned in the training_task_definition, then it should be assumed that the TrainingPipeline does not depend on this configuration.
  *   `labels` (*type:* `map()`, *default:* `nil`) - The labels with user-defined metadata to organize TrainingPipelines. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.
  *   `modelId` (*type:* `String.t`, *default:* `nil`) - Optional. The ID to use for the uploaded Model, which will become the final component of the model resource name. This value may be up to 63 characters, and valid characters are `[a-z0-9_-]`. The first character cannot be a number or hyphen.
  *   `modelToUpload` (*type:* `GoogleApi.AiPlatform.V1.Model.GoogleCloudAiplatformV1Model.t`, *default:* `nil`) - Describes the Model that may be uploaded (via ModelService.UploadModel) by this TrainingPipeline. The TrainingPipeline's training_task_definition should make clear whether this Model description should be populated, and if there are any special requirements regarding how it should be filled. If nothing is mentioned in the training_task_definition, then it should be assumed that this field should not be filled and the training task either uploads the Model without a need of this information, or that training task does not support uploading a Model as part of the pipeline. When the Pipeline's state becomes `PIPELINE_STATE_SUCCEEDED` and the trained Model had been uploaded into Vertex AI, then the model_to_upload's resource name is populated. The Model is always uploaded into the Project and Location in which this pipeline is.
  *   `name` (*type:* `String.t`, *default:* `nil`) - Output only. Resource name of the TrainingPipeline.
  *   `parentModel` (*type:* `String.t`, *default:* `nil`) - Optional. When specify this field, the `model_to_upload` will not be uploaded as a new model, instead, it will become a new version of this `parent_model`.
  *   `startTime` (*type:* `DateTime.t`, *default:* `nil`) - Output only. Time when the TrainingPipeline for the first time entered the `PIPELINE_STATE_RUNNING` state.
  *   `state` (*type:* `String.t`, *default:* `nil`) - Output only. The detailed state of the pipeline.
  *   `trainingTaskDefinition` (*type:* `String.t`, *default:* `nil`) - Required. A Google Cloud Storage path to the YAML file that defines the training task which is responsible for producing the model artifact, and may also include additional auxiliary work. The definition files that can be used here are found in gs://google-cloud-aiplatform/schema/trainingjob/definition/. Note: The URI given on output will be immutable and probably different, including the URI scheme, than the one given on input. The output URI will point to a location where the user only has a read access.
  *   `trainingTaskInputs` (*type:* `any()`, *default:* `nil`) - Required. The training task's parameter(s), as specified in the training_task_definition's `inputs`.
  *   `trainingTaskMetadata` (*type:* `any()`, *default:* `nil`) - Output only. The metadata information as specified in the training_task_definition's `metadata`. This metadata is an auxiliary runtime and final information about the training task. While the pipeline is running this information is populated only at a best effort basis. Only present if the pipeline's training_task_definition contains `metadata` object.
  *   `updateTime` (*type:* `DateTime.t`, *default:* `nil`) - Output only. Time when the TrainingPipeline was most recently updated.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :createTime => DateTime.t() | nil,
          :displayName => String.t() | nil,
          :encryptionSpec =>
            GoogleApi.AiPlatform.V1.Model.GoogleCloudAiplatformV1EncryptionSpec.t() | nil,
          :endTime => DateTime.t() | nil,
          :error => GoogleApi.AiPlatform.V1.Model.GoogleRpcStatus.t() | nil,
          :inputDataConfig =>
            GoogleApi.AiPlatform.V1.Model.GoogleCloudAiplatformV1InputDataConfig.t() | nil,
          :labels => map() | nil,
          :modelId => String.t() | nil,
          :modelToUpload => GoogleApi.AiPlatform.V1.Model.GoogleCloudAiplatformV1Model.t() | nil,
          :name => String.t() | nil,
          :parentModel => String.t() | nil,
          :startTime => DateTime.t() | nil,
          :state => String.t() | nil,
          :trainingTaskDefinition => String.t() | nil,
          :trainingTaskInputs => any() | nil,
          :trainingTaskMetadata => any() | nil,
          :updateTime => DateTime.t() | nil
        }

  field(:createTime, as: DateTime)
  field(:displayName)
  field(:encryptionSpec, as: GoogleApi.AiPlatform.V1.Model.GoogleCloudAiplatformV1EncryptionSpec)
  field(:endTime, as: DateTime)
  field(:error, as: GoogleApi.AiPlatform.V1.Model.GoogleRpcStatus)

  field(:inputDataConfig, as: GoogleApi.AiPlatform.V1.Model.GoogleCloudAiplatformV1InputDataConfig)

  field(:labels, type: :map)
  field(:modelId)
  field(:modelToUpload, as: GoogleApi.AiPlatform.V1.Model.GoogleCloudAiplatformV1Model)
  field(:name)
  field(:parentModel)
  field(:startTime, as: DateTime)
  field(:state)
  field(:trainingTaskDefinition)
  field(:trainingTaskInputs)
  field(:trainingTaskMetadata)
  field(:updateTime, as: DateTime)
end

defimpl Poison.Decoder, for: GoogleApi.AiPlatform.V1.Model.GoogleCloudAiplatformV1TrainingPipeline do
  def decode(value, options) do
    GoogleApi.AiPlatform.V1.Model.GoogleCloudAiplatformV1TrainingPipeline.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.AiPlatform.V1.Model.GoogleCloudAiplatformV1TrainingPipeline do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
