# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule <%= namespace %>.Models do
    @moduledoc """
    Collects all models generated for <%= namespace %>.
    """
<%= for model <- models do %>
    @type <%= Macro.underscore(model.name) %> :: %{
        <%= for property <- model.properties do %>
        :"<%= property.name %>" => <%= property.type.typespec %> | nil,
        <% end %>
    }

    @doc """
    <%= render_description(model.description, indent_subsequent: 2) %>

    ## Attributes
    <%= for property <- model.properties do %>
    *   `<%= property.name %>` (*type:* `<%= property.type.typespec %>`, *default:* `<%= GoogleApis.Generator.ElixirGenerator.Model.value_string(property.default) %>`) - <%= render_description(property.description, indent_subsequent: 6) %><% end %>
    """
    def <%= Macro.underscore(model.name) %>, do: <%= Macro.underscore(model.name) %>([])
    def <%= Macro.underscore(model.name) %>(kv) do
        IO.inspect(kv)
        %{
        <%= for property <- model.properties do %>
            <% if model.name == "ListeSpacesResponse" do IO.inspect(property) end %>
            :"<%= property.name %>" => 
                <%= if property.type.typed_map do
                        if property.type.is_list do
                            "& Enum.map(&1, fn v -> #{property.type.typed_map}(v) end)"
                        else
                            "& #{property.type.typed_map}/1"
                        end
                else "nil" end %>,
        <% end %>
        }
        |> Enum.map(fn {key, mapper} ->
            value =
                case kv[key] do
                    nil ->
                        case kv[to_string(key)] do
                            nil ->
                                # No value for neither string nor atom key
                                nil
                            val ->
                                val
                        end
                    val ->
                        val
                end
                            
            if mapper do
                {key, mapper.(value)}
            else
                {key, value}
            end
        end)
        |> Map.new()
    end

<% end %>
end