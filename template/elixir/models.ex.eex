# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule <%= namespace %>.Models do
    @moduledoc """
    Collects all models generated for <%= namespace %>.
    """
<%= for model <- models do %>
    @type <%= Macro.underscore(model.name) %> :: %{
        <%= for property <- model.properties do %>
        :"<%= property.name %>" => <%= property.type.typespec %> | nil,
        <% end %>
    }

    @doc """
    <%= render_description(model.description, indent_subsequent: 2) %>

    ## Attributes
    <%= for property <- model.properties do %>
    *   `<%= property.name %>` (*type:* `<%= property.type.typespec %>`, *default:* `<%= GoogleApis.Generator.ElixirGenerator.Model.value_string(property.default) %>`) - <%= render_description(property.description, indent_subsequent: 6) %><% end %>
    """
    @keys [<%= model.properties |> Enum.map(fn p -> ":#{p.name}" end) |> Enum.join(",") %>]
    def <%= Macro.underscore(model.name) %>, do: <%= Macro.underscore(model.name) %>([])
    def <%= Macro.underscore(model.name) %>(kv) do
        inputs =
            kv
            |> Enum.reduce(%{}, fn {key, value}, acc ->
                key = 
                    case key do
                        key when is_binary(key) ->
                            String.to_existing_atom(key)
                        key when is_atom(key) ->
                            key
                    end

                if key in @keys do
                    Map.put(acc, key, value)
                else
                    raise "Bad key #{inspect(key)} in <%= model.name %>."
                end
            end)

        @keys
        |> Enum.map(fn key -> {key, nil} end)
        |> Map.new()
        |> Map.merge(inputs)
    end

<% end %>
end